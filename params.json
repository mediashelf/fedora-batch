{"tagline":"A batch controller for Fedora's REST API","google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","body":"MediaShelf fedora-batch\r\n========================\r\n\r\nA batch controller for Fedora's REST API.\r\n\r\nfedora-batch is a proof-of-concept implementation of a batch API for Fedora.\r\n\r\nSay, for example, you want to display the metadata for 10 different Fedora \r\nobjects on a web page. For the sake of example, let's assume we're working with \r\n10 Fedora objects which each represent a video resource and that the metadata \r\nwe're interested in is contained in each object's DC datastream.\r\n\r\nCurrently, you might tackle this by issuing 10 separate getDatastreamDissemination \r\nrequests to Fedora. However, what if you could just issue a single batch \r\nrequest to Fedora and have Fedora assemble and return a single response?\r\n\r\nAnd because requirements always change, now imagine that you also need some \r\nmetadata that's only captured in the RELS-EXT datastream, so now instead of 10,\r\nyou face 20 separate HTTP requests. But with the batch request, you just add \r\nthe second datastream ID parameter and the batch controller takes care of the rest.\r\n\r\nLies, Damn Lies, and Benchmarks\r\n------------\r\n\r\n![getDatastreams benchmark graph](https://github.com/mediashelf/fedora-batch/raw/master/src/site/resources/images/batchGetDatastreams-bench.png)\r\n\r\nIn each of the tests above we are requesting 1 inline datastream and 1 managed datastream from 1, 10 or 20 objects (1x, 10x, 20x). The 10K, 100K, 1000K reflect the size (in KB) of the managed datastream (the inline datastream is the DC datastream, weighing in at less than 1KB). The batch\\* tests are using BatchGetDatastreams, the serial\\* tests are making one request per datastream per object.\r\n\r\nThe timings measure a full roundtrip: request, response and reading out the response.\r\n\r\nThe tests suggest a fairly marked performance benefit to using BatchGetDatastreams (2-4 times faster) over issuing a series of individual getDatastreamDissemination requests.\r\n\r\nUsage\r\n------------\r\n\r\nSample request:\r\n\r\n    http://localhost:8080/fedora/batch/getDatastreams?pid=demo:1&pid=demo:2&dsid=DC\r\n    \r\nThe request above fetches the DC datastreams from demo:1 and demo:2 objects, and \r\nreturns the result as a multipart/mixed message, e.g.:\r\n\r\n```\r\n--uuid:3d31e842-3291-44ca-ad66-43f6cea63f90\r\nContent-Type: text/xml\r\nContent-Transfer-Encoding: binary\r\nContent-ID: <demo:1/DC>\r\n\r\n\r\n<oai_dc:dc xmlns:oai_dc=\"http://www.openarchives.org/OAI/2.0/oai_dc/\" \r\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\" \r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n    xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\">\r\n  <dc:title>Demo Object 1</dc:title>\r\n  <dc:identifier>demo:1</dc:identifier>\r\n</oai_dc:dc>\r\n\r\n--uuid:3d31e842-3291-44ca-ad66-43f6cea63f90--\r\nContent-Type: text/xml\r\nContent-Transfer-Encoding: binary\r\nContent-ID: <demo:2/DC>\r\n\r\n\r\n<oai_dc:dc xmlns:oai_dc=\"http://www.openarchives.org/OAI/2.0/oai_dc/\" \r\n    xmlns:dc=\"http://purl.org/dc/elements/1.1/\" \r\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n    xsi:schemaLocation=\"http://www.openarchives.org/OAI/2.0/oai_dc/ http://www.openarchives.org/OAI/2.0/oai_dc.xsd\">\r\n  <dc:title>Demo Object 2</dc:title>\r\n  <dc:identifier>demo:2</dc:identifier>\r\n</oai_dc:dc>\r\n\r\n--uuid:0e61693c-18ea-4b53-912f-b4d15dd00283--\r\n```\r\n\r\nAs of version 0.5, fedora-client provides basic support for BatchGetDatastreams:\r\n\r\n```\r\nBatchGetDatastreams req = new BatchGetDatastreams();\r\nBatchResponse res = req.pids(\"demo:1\", \"demo:2\").dsids(\"DC\").execute(fedora);\r\nfor (BodyPart part : res.getBodyParts()) {\r\n  // do something...\r\n  System.out.println(part.getEntityAs(String.class);\r\n}\r\n```\r\n\r\nRequirements\r\n------------\r\n\r\n* Fedora 3.6 (if you're interested in undertaking a backport for 3.5, contact me)\r\n\r\nInstallation\r\n------------\r\n\r\nfedora-batch-webapp-NNN.war is a drop-in replacement for fedora.war but requires\r\na Servlet 3.0 container (e.g. Tomcat 7.x).\r\n\r\nHowever, manual installation of fedora-batch for Servlet 3.x containers is trivial:\r\n\r\n1. Add `fedora-batch-core-NNN.jar` to your Fedora webapp.\r\n\r\n    (Tomcat users can copy the fedora-batch jar to `$CATALINA_HOME/webapps/fedora/WEB-INF/lib`)\r\n\r\n    Manual installation for Servlet 2.x containers (e.g Tomcat 6.x) adds just one \r\n    additional step (e.g. Tomcat 6.x) of updating the web.xml of the Fedora webapp:\r\n\r\n2. Edit your Fedora web.xml to include the following:\r\n\r\n        <servlet>\r\n          <display-name>CXF Batch Servlet</display-name>\r\n          <servlet-name>CXFBatchServlet</servlet-name>\r\n          <servlet-class>org.apache.cxf.transport.servlet.CXFServlet</servlet-class>\r\n          <init-param>\r\n            <param-name>config-location</param-name>\r\n            <param-value>classpath:batch-jaxrs.xml</param-value>\r\n          </init-param>\r\n          <load-on-startup>3</load-on-startup>\r\n        </servlet>\r\n\r\n        <servlet-mapping>\r\n          <servlet-name>CXFBatchServlet</servlet-name>\r\n          <url-pattern>/batch/*</url-pattern>\r\n        </servlet-mapping>\r\n\r\n    (Tomcat users will find your web.xml in `$CATALINA_HOME/webapps/fedora/WEB-INF/web.xml`)\r\n\r\nBuilding from source\r\n--------------------\r\n\r\n1. Download the source, e.g.\r\n\r\n        git clone git://github.com/mediashelf/fedora-batch.git\r\n\r\n2. Build the project\r\n\r\n        cd fedora-batch\r\n        mvn install\r\n        \r\n\r\nLicense & Copyright\r\n-------------------\r\n\r\nfedora-batch is free software: you can redistribute it and/or modify\r\nit under the terms of the GNU Lesser General Public License as published by\r\nthe Free Software Foundation, either version 3 of the License, or\r\n(at your option) any later version.\r\n\r\nfedora-batch is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\nGNU Lesser General Public License for more details.\r\n\r\nYou should have received a copy of the GNU Lesser General Public License\r\nalong with fedora-client.  If not, see <http://www.gnu.org/licenses/>.\r\n\r\nCopyright &copy; 2012 MediaShelf\r\n","name":"Fedora-batch"}